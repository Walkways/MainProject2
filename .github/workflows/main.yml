name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test_and_ci:
    runs-on: ubuntu-latest

    env:
      GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      # Ajoutez d'autres variables d'environnement GCP au besoin
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2



      # Ajoutez vos tâches de test et de CI ici
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Spécifiez la version de Python que vous utilisez

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest  # Installer pytest
        working-directory: app/  # Spécifiez le chemin vers votre code Python

      - name: Run tests with pytest
        run: |
          pytest
        #working-directory: app/

    ########

      - name: Install Flake8
        run: pip install flake8

      - name: Run Flake8
        run: flake8 --exclude=test_my_module.py
        working-directory: app/

      - name: Install radon
        run: pip install radon

      - name: Analyze Cyclomatic Complexity
        run: radon cc -s -a -e "venv/*" .

      - name: Install cpplint
        run: pip install cpplint

      - name: Check Code Duplication
        run: cpplint --recursive . 



    #########


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          #DOCKER_USERNAME: "mansoursou"
          
        run: |
          docker buildx create --use
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker buildx build --push -t mansoursou/mon_app:latest -f Dockerfile .



    #######      

  cd:
    runs-on: ubuntu-latest
    needs: test_and_ci

    env:
      GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      # Ajoutez d'autres variables d'environnement GCP au besoin
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2      

      # Ajoutez vos tâches de déploiement (CD) ici

### 2nd partie

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

          # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false -var="db_password=${{ secrets.DB_PASSWORD }}"
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Terraform Apply      
        run: terraform apply -auto-approve -input=false -var="db_password=${{ secrets.DB_PASSWORD }}"          
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: Set Output Variable
        id: set_output
        run: |
          output=$(terraform output -raw database_ip)
          echo "::set-output name=output::${output}"
          echo "TF_OUTPUT=${output}" >> $GITHUB_ENV
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Use Exported Variable
        run: echo $TF_OUTPUT
        
   




      #- name: Install Python For GCLOUD
      #  uses: actions/setup-python@v4
      #  with:
      #        python-version: '3.9'


      - name: Set up Google Cloud CLI authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}




      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true


      - name: Install gke-gcloud-auth-plugin
        run: |
          #sudo apt-get install kubectl
          gcloud components install kubectl
          gcloud components install gke-gcloud-auth-plugin

      - name: Authentification GCP
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json          
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud container clusters get-credentials mon-cluster --region=us-central1
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_CREDENTIALS }}


          
      
      

      - name: Kubectl Commands Test
        run: |          
          kubectl apply -f service.yaml
          kubectl delete configmap mon-app-config || true
          kubectl create configmap mon-app-config --from-literal=BDD_IP=$TF_OUTPUT --from-literal=BDD_MDP=${{ secrets.DB_PASSWORD }}
          kubectl apply -f deployment.yaml
          kubectl get services




###

















      
